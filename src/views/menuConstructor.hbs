<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Конструктор меню</title>
    <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@400;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/styles/menuConstructorStyle.css">
</head>
<body>
   <div id="app">
       <h1>Конструктор меню</h1>

       <div id="ingredients-container">
           {{#each ingredients}}
               <div class="ingredient-card" onclick="toggleIngredient(this)">
                   <label>{{this.name}}</label>
                   <p>Калории: {{this.calories}}</p>
                   <img src="{{this.imageURL}}" alt="{{this.name}}" />
                   <input type="checkbox" onchange="toggleSelection(this)" value="{{this._id}}" style="display:none;">
               </div>
           {{/each}}
       </div>

       <label for="meal-type">Выберите тип блюда:</label>
       <select id="meal-type">
           <option value="">Все</option>
           <option value="breakfast">breakfast</option>
           <option value="lunch">lunch</option>
           <option value="dinner">dinner</option>
       </select>

       <button id="fetch-dishes">Показать блюда</button>

       <div id="dishes-container"></div>
   </div>

   <script src="https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/4.7.7/handlebars.min.js"></script>
   <script>
   const selectedIngredients = [];
   let selectedMealType = '';

   function toggleIngredient(card) {
       const checkbox = card.querySelector('input[type="checkbox"]');
       checkbox.checked = !checkbox.checked;
       toggleSelection(checkbox);
       card.classList.toggle('selected');
   }

   function toggleSelection(checkbox) {
       const ingredientId = checkbox.value;

       if (checkbox.checked) {
           if (!selectedIngredients.includes(ingredientId)) {
               selectedIngredients.push(ingredientId);
           }
       } else {
           const index = selectedIngredients.indexOf(ingredientId);
           if (index > -1) {
               selectedIngredients.splice(index, 1);
           }
       }
   }

   async function fetchDishes() {
      if (selectedIngredients.length === 0) {
          alert('Пожалуйста, выберите хотя бы один ингредиент.');
          return;
      }

      selectedMealType = document.getElementById('meal-type').value;

      try {
          const response = await fetch('/dishes/filter', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                  ingredients: selectedIngredients,
                  mealType: selectedMealType,
              }),
          });

          if (!response.ok) {
              throw new Error('Ошибка при получении блюд');
          }

          const dishes = await response.json();
          displayDishes(dishes);
      } catch (error) {
          console.error('Ошибка:', error);
      }
  }

  function displayDishes(dishes) {
    const dishesContainer = document.getElementById('dishes-container');
    dishesContainer.innerHTML = '';

    if (dishes.length === 0) { 
        dishesContainer.innerHTML = 'Нет блюд для выбранных ингредиентов.'; 
        return; 
    } 

    dishesContainer.style.display = 'flex'; 

    dishes.forEach(dish => { 
        const card = document.createElement('div'); 
        card.className = 'dish-card'; 

        // Находим недостающие ингредиенты
        const missingIngredients = [];
        if (Array.isArray(dish.ingredientsList)) {
            dish.ingredientsList.forEach(item => {
                if (!selectedIngredients.includes(item.ingredientId._id)) {
                    missingIngredients.push(item.ingredientId.name);
                }
            });
        }

        const collapsedView = document.createElement('div');
        
        const mealTypeText = dish.mealType ? dish.mealType.charAt(0).toUpperCase() + dish.mealType.slice(1) : 'Неизвестный тип';
        
        collapsedView.innerHTML =
            `<img src="${dish.imageURL}" alt="${dish.name}"" />  
            <h3>${dish.name}</h3>
            <p>Тип блюда: ${mealTypeText}</p>
            ${missingIngredients.length > 0 
                ? `<p class="missing-ingredients">Не хватает: ${missingIngredients.join(', ')}</p>`
                : '<p class="complete-dish">Все ингредиенты есть!</p>'}`; 

        collapsedView.style.cursor = "pointer"; 

        const detailsDiv = document.createElement('div');
        detailsDiv.className = 'dish-details';
        detailsDiv.style.display = 'none'; 
        
        detailsDiv.innerHTML =
`<img src="${dish.imageURL}" alt="${dish.name}"" />
<p>Калории: ${dish.calories}</p>  
<p>${dish.description || 'Описание отсутствует.'}</p>  
<h4>Рецепт:</h4>  
<p>${dish.recipe}</p>  
<h4>Ингредиенты:</h4>
<p>${Array.isArray(dish.ingredientsList) && dish.ingredientsList.length > 0 
    ? dish.ingredientsList.map(item => {
        const isMissing = !selectedIngredients.includes(item.ingredientId._id);
        return `<span class="${isMissing ? 'missing' : ''}">${item.quantity}г. ${item.ingredientId.name}${isMissing ? ' (не хватает)' : ''}</span>`;
    }).join('<br>')
    : 'Ингредиенты отсутствуют.'}</p>`;

        const addButton = document.createElement('button');
        addButton.textContent = 'Добавить';
        addButton.onclick = async function(event) { 
            event.stopPropagation(); 
            await addDishToMenu(dish._id); 
        };

        card.onclick = function() {
            if (detailsDiv.style.display === 'none') { 
                detailsDiv.style.display = 'block'; 
                collapsedView.style.display = 'none'; 
            } else { 
                detailsDiv.style.display = 'none'; 
                collapsedView.style.display = 'block'; 
            }
        };

        card.appendChild(collapsedView); 
        card.appendChild(detailsDiv); 
        card.appendChild(addButton); 

        dishesContainer.appendChild(card); 
    }); 
}

      async function addDishToMenu(dishId) { 
    try {
        const response = await fetch('/menu/addMenu', { 
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ dishId }) 
        });

        if (!response.ok) throw new Error(`Ошибка при добавлении блюда в меню: ${response.statusText}`);

        const data = await response.json();
        alert(data.message); 
    } catch (error) {
        console.error("Ошибка:", error);
        alert("Не удалось добавить блюдо в меню.");
    }
}

      document.getElementById('fetch-dishes').addEventListener('click', fetchDishes);
      document.getElementById('meal-type').addEventListener('change', fetchDishes);
   </script>
   
   <style>
       .missing-ingredients {
           color: #ff6b6b;
           font-weight: bold;
       }
       
       .complete-dish {
           color: #51cf66;
           font-weight: bold;
       }
       
       .dish-details .missing {
           color: #ff6b6b;
           text-decoration: line-through;
       }
   </style>
</body>
</html>